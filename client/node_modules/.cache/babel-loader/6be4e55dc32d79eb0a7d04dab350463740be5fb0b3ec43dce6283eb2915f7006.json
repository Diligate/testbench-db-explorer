{"ast":null,"code":"var _jsxFileName = \"/home/user5/Desktop/Imbus_Intern/client/src/pages/client/tableDetail/TableGraph.js\",\n  _s = $RefreshSig$();\nimport { useMemo, useRef } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TableGraph({\n  graph,\n  tableName,\n  attributes,\n  relations\n}) {\n  _s();\n  const fgRef = useRef();\n  const navigate = useNavigate();\n\n  // Filter graph to only show main table and neighbors\n  const filteredGraph = useMemo(() => {\n    if (!(graph !== null && graph !== void 0 && graph.nodes) || !(graph !== null && graph !== void 0 && graph.links)) return {\n      nodes: [],\n      links: []\n    };\n    const main = graph.nodes.find(n => n.name === tableName);\n    if (!main) return {\n      nodes: [],\n      links: []\n    };\n    const neighbors = new Set([main.id]);\n    const links = graph.links.filter(l => {\n      const srcId = typeof l.source === \"object\" ? l.source.id : l.source;\n      const tgtId = typeof l.target === \"object\" ? l.target.id : l.target;\n      if (srcId === main.id || tgtId === main.id) {\n        neighbors.add(srcId);\n        neighbors.add(tgtId);\n        return true;\n      }\n      return false;\n    }).map(l => {\n      const srcId = typeof l.source === \"object\" ? l.source.id : l.source;\n      const tgtId = typeof l.target === \"object\" ? l.target.id : l.target;\n      const srcNode = graph.nodes.find(n => n.id === srcId);\n      const tgtNode = graph.nodes.find(n => n.id === tgtId);\n      return {\n        ...l,\n        source: srcNode,\n        target: tgtNode,\n        srcName: srcNode === null || srcNode === void 0 ? void 0 : srcNode.name,\n        tgtName: tgtNode === null || tgtNode === void 0 ? void 0 : tgtNode.name,\n        pkColumns: (srcNode === null || srcNode === void 0 ? void 0 : srcNode.pkColumns) || [],\n        fkColumns: (srcNode === null || srcNode === void 0 ? void 0 : srcNode.fkColumns) || []\n      };\n    });\n    const nodes = graph.nodes.filter(n => neighbors.has(n.id));\n    return {\n      nodes,\n      links\n    };\n  }, [graph, tableName]);\n  if (!filteredGraph.nodes.length) return null;\n  return /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n    ref: fgRef,\n    graphData: filteredGraph,\n    nodeLabel: node => `${node.name}\\nPK: ${node.pkColumns.join(\", \")}\\nFK: ${node.fkColumns.join(\", \")}`,\n    nodeAutoColorBy: \"id\",\n    linkDirectionalArrowLength: 6,\n    linkDirectionalArrowRelPos: 1,\n    linkLabel: link => `${link.srcName} → ${link.tgtName}`,\n    onNodeClick: node => navigate(`/table/${node.name}`),\n    width: 800,\n    height: 600\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(TableGraph, \"GNoaObFHGxARaJXJzMu3tJdcTgM=\", false, function () {\n  return [useNavigate];\n});\n_c = TableGraph;\nvar _c;\n$RefreshReg$(_c, \"TableGraph\");","map":{"version":3,"names":["useMemo","useRef","ForceGraph2D","useNavigate","jsxDEV","_jsxDEV","TableGraph","graph","tableName","attributes","relations","_s","fgRef","navigate","filteredGraph","nodes","links","main","find","n","name","neighbors","Set","id","filter","l","srcId","source","tgtId","target","add","map","srcNode","tgtNode","srcName","tgtName","pkColumns","fkColumns","has","length","ref","graphData","nodeLabel","node","join","nodeAutoColorBy","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkLabel","link","onNodeClick","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/user5/Desktop/Imbus_Intern/client/src/pages/client/tableDetail/TableGraph.js"],"sourcesContent":["import { useMemo, useRef } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function TableGraph({ graph, tableName, attributes, relations }) {\n  const fgRef = useRef();\n  const navigate = useNavigate();\n\n  // Filter graph to only show main table and neighbors\n  const filteredGraph = useMemo(() => {\n    if (!graph?.nodes || !graph?.links) return { nodes: [], links: [] };\n\n    const main = graph.nodes.find((n) => n.name === tableName);\n    if (!main) return { nodes: [], links: [] };\n\n    const neighbors = new Set([main.id]);\n\n    const links = graph.links\n      .filter((l) => {\n        const srcId = typeof l.source === \"object\" ? l.source.id : l.source;\n        const tgtId = typeof l.target === \"object\" ? l.target.id : l.target;\n        if (srcId === main.id || tgtId === main.id) {\n          neighbors.add(srcId);\n          neighbors.add(tgtId);\n          return true;\n        }\n        return false;\n      })\n      .map((l) => {\n        const srcId = typeof l.source === \"object\" ? l.source.id : l.source;\n        const tgtId = typeof l.target === \"object\" ? l.target.id : l.target;\n        const srcNode = graph.nodes.find((n) => n.id === srcId);\n        const tgtNode = graph.nodes.find((n) => n.id === tgtId);\n\n        return {\n          ...l,\n          source: srcNode,\n          target: tgtNode,\n          srcName: srcNode?.name,\n          tgtName: tgtNode?.name,\n          pkColumns: srcNode?.pkColumns || [],\n          fkColumns: srcNode?.fkColumns || [],\n        };\n      });\n\n    const nodes = graph.nodes.filter((n) => neighbors.has(n.id));\n    return { nodes, links };\n  }, [graph, tableName]);\n\n  if (!filteredGraph.nodes.length) return null;\n\n  return (\n    <ForceGraph2D\n      ref={fgRef}\n      graphData={filteredGraph}\n      nodeLabel={(node) =>\n        `${node.name}\\nPK: ${node.pkColumns.join(\", \")}\\nFK: ${node.fkColumns.join(\", \")}`\n      }\n      nodeAutoColorBy=\"id\"\n      linkDirectionalArrowLength={6}\n      linkDirectionalArrowRelPos={1}\n      linkLabel={(link) => `${link.srcName} → ${link.tgtName}`}\n      onNodeClick={(node) => navigate(`/table/${node.name}`)}\n      width={800}\n      height={600}\n    />\n  );\n}\n"],"mappings":";;AAAA,SAASA,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,eAAe,SAASC,UAAUA,CAAC;EAAEC,KAAK;EAAEC,SAAS;EAAEC,UAAU;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAC9E,MAAMC,KAAK,GAAGX,MAAM,CAAC,CAAC;EACtB,MAAMY,QAAQ,GAAGV,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMW,aAAa,GAAGd,OAAO,CAAC,MAAM;IAClC,IAAI,EAACO,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEQ,KAAK,KAAI,EAACR,KAAK,aAALA,KAAK,eAALA,KAAK,CAAES,KAAK,GAAE,OAAO;MAAED,KAAK,EAAE,EAAE;MAAEC,KAAK,EAAE;IAAG,CAAC;IAEnE,MAAMC,IAAI,GAAGV,KAAK,CAACQ,KAAK,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAKZ,SAAS,CAAC;IAC1D,IAAI,CAACS,IAAI,EAAE,OAAO;MAAEF,KAAK,EAAE,EAAE;MAAEC,KAAK,EAAE;IAAG,CAAC;IAE1C,MAAMK,SAAS,GAAG,IAAIC,GAAG,CAAC,CAACL,IAAI,CAACM,EAAE,CAAC,CAAC;IAEpC,MAAMP,KAAK,GAAGT,KAAK,CAACS,KAAK,CACtBQ,MAAM,CAAEC,CAAC,IAAK;MACb,MAAMC,KAAK,GAAG,OAAOD,CAAC,CAACE,MAAM,KAAK,QAAQ,GAAGF,CAAC,CAACE,MAAM,CAACJ,EAAE,GAAGE,CAAC,CAACE,MAAM;MACnE,MAAMC,KAAK,GAAG,OAAOH,CAAC,CAACI,MAAM,KAAK,QAAQ,GAAGJ,CAAC,CAACI,MAAM,CAACN,EAAE,GAAGE,CAAC,CAACI,MAAM;MACnE,IAAIH,KAAK,KAAKT,IAAI,CAACM,EAAE,IAAIK,KAAK,KAAKX,IAAI,CAACM,EAAE,EAAE;QAC1CF,SAAS,CAACS,GAAG,CAACJ,KAAK,CAAC;QACpBL,SAAS,CAACS,GAAG,CAACF,KAAK,CAAC;QACpB,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC,CAAC,CACDG,GAAG,CAAEN,CAAC,IAAK;MACV,MAAMC,KAAK,GAAG,OAAOD,CAAC,CAACE,MAAM,KAAK,QAAQ,GAAGF,CAAC,CAACE,MAAM,CAACJ,EAAE,GAAGE,CAAC,CAACE,MAAM;MACnE,MAAMC,KAAK,GAAG,OAAOH,CAAC,CAACI,MAAM,KAAK,QAAQ,GAAGJ,CAAC,CAACI,MAAM,CAACN,EAAE,GAAGE,CAAC,CAACI,MAAM;MACnE,MAAMG,OAAO,GAAGzB,KAAK,CAACQ,KAAK,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACI,EAAE,KAAKG,KAAK,CAAC;MACvD,MAAMO,OAAO,GAAG1B,KAAK,CAACQ,KAAK,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACI,EAAE,KAAKK,KAAK,CAAC;MAEvD,OAAO;QACL,GAAGH,CAAC;QACJE,MAAM,EAAEK,OAAO;QACfH,MAAM,EAAEI,OAAO;QACfC,OAAO,EAAEF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEZ,IAAI;QACtBe,OAAO,EAAEF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEb,IAAI;QACtBgB,SAAS,EAAE,CAAAJ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,SAAS,KAAI,EAAE;QACnCC,SAAS,EAAE,CAAAL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEK,SAAS,KAAI;MACnC,CAAC;IACH,CAAC,CAAC;IAEJ,MAAMtB,KAAK,GAAGR,KAAK,CAACQ,KAAK,CAACS,MAAM,CAAEL,CAAC,IAAKE,SAAS,CAACiB,GAAG,CAACnB,CAAC,CAACI,EAAE,CAAC,CAAC;IAC5D,OAAO;MAAER,KAAK;MAAEC;IAAM,CAAC;EACzB,CAAC,EAAE,CAACT,KAAK,EAAEC,SAAS,CAAC,CAAC;EAEtB,IAAI,CAACM,aAAa,CAACC,KAAK,CAACwB,MAAM,EAAE,OAAO,IAAI;EAE5C,oBACElC,OAAA,CAACH,YAAY;IACXsC,GAAG,EAAE5B,KAAM;IACX6B,SAAS,EAAE3B,aAAc;IACzB4B,SAAS,EAAGC,IAAI,IACd,GAAGA,IAAI,CAACvB,IAAI,SAASuB,IAAI,CAACP,SAAS,CAACQ,IAAI,CAAC,IAAI,CAAC,SAASD,IAAI,CAACN,SAAS,CAACO,IAAI,CAAC,IAAI,CAAC,EACjF;IACDC,eAAe,EAAC,IAAI;IACpBC,0BAA0B,EAAE,CAAE;IAC9BC,0BAA0B,EAAE,CAAE;IAC9BC,SAAS,EAAGC,IAAI,IAAK,GAAGA,IAAI,CAACf,OAAO,MAAMe,IAAI,CAACd,OAAO,EAAG;IACzDe,WAAW,EAAGP,IAAI,IAAK9B,QAAQ,CAAC,UAAU8B,IAAI,CAACvB,IAAI,EAAE,CAAE;IACvD+B,KAAK,EAAE,GAAI;IACXC,MAAM,EAAE;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEN;AAAC7C,EAAA,CA/DuBL,UAAU;EAAA,QAEfH,WAAW;AAAA;AAAAsD,EAAA,GAFNnD,UAAU;AAAA,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}