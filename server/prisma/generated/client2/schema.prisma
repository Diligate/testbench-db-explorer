generator client {
  provider = "prisma-client-js"
  output   = "./generated/client2"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL2")
}

model users {
  username String  @id(map: "pk_Users") @db.NVarChar(64)
  password String? @db.NVarChar(64)
  salt     String? @db.NVarChar(64)
}

model ApplicationPropertiesBean {
  PK                        BigInt   @id(map: "pk_ApplicationPropertiesBean") @default(autoincrement())
  execAutoCheckIn           Boolean? @default(true, map: "DF__Applicati__execA__03C811C8")
  repositoryID              String?  @db.VarChar(8)
  variantsManagementEnabled Boolean? @default(false, map: "DF__Applicati__varia__04BC3601")
  revision                  BigInt?  @default(0, map: "DF__Applicati__revis__05B05A3A")
  baseTIURL                 String?  @db.NVarChar(2048)
  invalidTIURL              Boolean? @default(false, map: "DF__Applicati__inval__06A47E73")
  tiAdminLogin              String?  @db.NVarChar(30)
  tiPassword                String?  @db.NVarChar(41)
  tiEvaluation              Boolean? @default(false, map: "DF__Applicati__tiEva__0798A2AC")
  tiDataRetrieve            Boolean? @default(true, map: "DF__Applicati__tiDat__088CC6E5")
}

model AttachmentBean {
  PK         BigInt    @id(map: "pk_AttachmentBean") @default(autoincrement())
  filename   String?   @db.NVarChar(256)
  path       String?   @db.NText
  userPK     BigInt?
  lastEdited DateTime? @db.DateTime
  filePK     BigInt?
  revision   BigInt?   @default(0, map: "DF__Attachmen__revis__194D3E93")

  @@index([filename], map: "idx_attb_filename")
  @@index([userPK], map: "idx_attb_userPK")
}

model AttachmentBufferBean {
  PK       BigInt  @id(map: "pk_AttachmentBufferBean") @default(autoincrement())
  buffer   Bytes?  @db.Image
  revision BigInt? @default(0, map: "DF__Attachmen__revis__1C29AB3E")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model audittrail {
  objectPK   String?   @db.NVarChar(256)
  beanName   String?   @db.NVarChar(256)
  methodName String?   @db.NVarChar(256)
  txID       BigInt?
  txStatus   String?   @db.NVarChar(20)
  userName   String?   @db.NVarChar(256)
  lastUpdate DateTime? @db.DateTime
  comments   String?   @db.NVarChar(256)

  @@ignore
}

model AutInfoRefRelBean {
  PK                 BigInt  @id(map: "pk_AutInfoRefRelBean") @default(autoincrement())
  referenceBean      BigInt?
  autInformationBean BigInt?
  revision           BigInt? @default(0, map: "DF__AutInfoRe__revis__3AE33C88")

  @@index([referenceBean], map: "idx_autrefb_refPK")
  @@index([autInformationBean], map: "idx_refb_autPK")
}

model AutInformationBean {
  PK                 BigInt    @id(map: "pk_AutInformationBean") @default(autoincrement())
  testCaseNodePK     BigInt?
  testCase           Boolean
  identicalVersionPK BigInt?
  status             Int
  responsible        BigInt
  priority           Int
  reviewer           BigInt
  locker             BigInt
  targetDate         DateTime? @db.DateTime
  scriptTemplate     String?   @db.NVarChar(256)
  scriptEditor       String?   @db.NVarChar(256)
  version            BigInt?
  revision           BigInt?   @default(0, map: "DF__AutInform__revis__0E45A03B")

  @@index([locker], map: "idx_autb_lockerPK")
  @@index([PK, locker], map: "idx_autb_pk_locker")
  @@index([responsible], map: "idx_autb_responsiblePK")
  @@index([reviewer], map: "idx_autb_reviewerPK")
  @@index([testCaseNodePK], map: "idx_autb_tcnPK")
}

model ConditionBean {
  PK                 BigInt  @id(map: "pk_ConditionBean") @default(autoincrement())
  parentPK           BigInt?
  elementName        String? @db.NVarChar(256)
  uniqueID           String? @db.VarChar(32)
  parentUID          String? @db.VarChar(32)
  locker             BigInt?
  objectVersionPK    BigInt?
  libraryPK          BigInt?
  identicalVersionPK BigInt?
  historyPK          BigInt?
  description        BigInt?
  version            BigInt?
  revision           BigInt? @default(0, map: "DF__Condition__revis__11220CE6")

  @@index([description], map: "idx_cdb_desc")
  @@index([identicalVersionPK], map: "idx_cdb_ivPK")
  @@index([locker], map: "idx_cdb_lockerPK")
  @@index([parentPK], map: "idx_cdb_parentPK")
  @@index([parentPK, elementName], map: "idx_cdb_parentPK_name")
  @@index([parentPK, objectVersionPK], map: "idx_cdb_parentPK_tovPK")
  @@index([objectVersionPK], map: "idx_cdb_tovPK")
  @@index([objectVersionPK, locker], map: "idx_cdb_tovPK_lockerPK")
  @@index([objectVersionPK, uniqueID], map: "idx_cdb_tovPK_uid")
}

model ConditionRefRelBean {
  PK            BigInt  @id(map: "pk_ConditionRefRelBean") @default(autoincrement())
  referenceBean BigInt?
  conditionBean BigInt?
  revision      BigInt? @default(0, map: "DF__Condition__revis__7F8D6C90")
}

model DataTypeBean {
  PK                 BigInt  @id(map: "pk_DataTypeBean") @default(autoincrement())
  parentPK           BigInt?
  elementName        String? @db.NVarChar(256)
  uniqueID           String? @db.VarChar(32)
  parentUID          String? @db.VarChar(32)
  locker             BigInt?
  objectVersionPK    BigInt?
  libraryPK          BigInt?
  identicalVersionPK BigInt?
  historyPK          BigInt?
  description        BigInt?
  status             BigInt
  version            BigInt?
  kindOfDataType     Int
  revision           BigInt? @default(0, map: "DF__DataTypeB__revis__13FE7991")

  @@index([description], map: "idx_dtb_desc")
  @@index([identicalVersionPK], map: "idx_dtb_ivPK")
  @@index([locker], map: "idx_dtb_lockerPK")
  @@index([parentPK], map: "idx_dtb_parentPK")
  @@index([parentPK, elementName], map: "idx_dtb_parentPK_name")
  @@index([parentPK, objectVersionPK], map: "idx_dtb_parentPK_tovPK")
  @@index([PK, version], map: "idx_dtb_PK_version")
  @@index([objectVersionPK], map: "idx_dtb_tovPK")
  @@index([objectVersionPK, kindOfDataType], map: "idx_dtb_tovPK_kind")
  @@index([objectVersionPK, locker], map: "idx_dtb_tovPK_lockerPK")
  @@index([objectVersionPK, uniqueID], map: "idx_dtb_tovPK_uid")
}

model DataTypeRefRelBean {
  PK            BigInt  @id(map: "pk_DataTypeRefRelBean") @default(autoincrement())
  referenceBean BigInt?
  dataTypeBean  BigInt?
  revision      BigInt? @default(0, map: "DF__DataTypeR__revis__4654EF34")

  @@index([referenceBean], map: "idx_dtrefb_refPK")
  @@index([dataTypeBean], map: "idx_refb_dtPK")
}

model DataTypeSequenceBean {
  PK                   BigInt  @id(map: "pk_DataTypeSequenceBean") @default(autoincrement())
  seqIndex             BigInt
  dataTypeInstanceName String? @db.NVarChar(2000)
  definitionType       Int
  dataTypeChild        BigInt?
  dataTypeParent       BigInt?
  revision             BigInt? @default(0, map: "DF__DataTypeS__revis__16DAE63C")

  @@index([dataTypeChild], map: "idx_dtsb_childPK")
  @@index([dataTypeParent], map: "idx_dtsb_parentPK")
  @@index([dataTypeParent, dataTypeChild], map: "idx_dtsb_parentPK_childPK")
  @@index([dataTypeParent, seqIndex], map: "idx_dtsb_parentPK_seqIdxPK")
}

model DefectAttributeBean {
  PK             BigInt  @id(map: "pk_DefectAttributeBean") @default(autoincrement())
  defectPK       BigInt?
  attributeName  String? @db.NVarChar(256)
  attributeValue String? @db.NText
  revision       BigInt? @default(0, map: "DF__DefectAtt__revis__0822B291")

  @@index([defectPK, attributeName], map: "idx_dab_defectPK_attrName")
}

model DefectUDFBean {
  PK         BigInt   @id(map: "pk_DefectUDFBean") @default(autoincrement())
  udfName    String?  @db.NVarChar(256)
  projectPK  BigInt?
  ordering   Int?
  udfType    Int?
  syncOption Int?
  mustField  Boolean?
  revision   BigInt?  @default(0, map: "DF__DefectUDF__revis__0AFF1F3C")

  @@index([projectPK], map: "idx_dudfb_projPK")
  @@index([projectPK, udfName], map: "idx_dudfb_projPK_name")
}

model DefectUDFLOVBean {
  PK       BigInt  @id(map: "pk_DefectUDFLOVBean") @default(autoincrement())
  udfValue String? @db.NVarChar(256)
  udfPK    BigInt?
  ordering Int
  revision BigInt? @default(0, map: "DF__DefectUDF__revis__0DDB8BE7")
}

model DefectUsersMappingBean {
  PK                      BigInt  @id(map: "pk_DefectUsersMappingBean") @default(autoincrement())
  projectDefectSettingsPK BigInt?
  testBenchUserPK         BigInt?
  defectManagementUser    String? @db.NVarChar(256)
  defectManagementPasswd  String? @db.NVarChar(256)
  revision                BigInt? @default(0, map: "DF__DefectUse__revis__7CB0FFE5")
}

model EntityStringBean {
  PK                      BigInt  @id(map: "pk_EntityStringBean") @default(autoincrement())
  value                   String? @db.NVarChar(256)
  ProjectUserBean_rolesES BigInt?
  revision                BigInt? @default(0, map: "DF__EntityStr__revis__7E0F3872")

  @@index([ProjectUserBean_rolesES], map: "idx_esb_puroles")
}

model ErrorIDBean {
  PK                      BigInt    @id(map: "pk_ErrorIDBean") @default(autoincrement())
  errorID                 String?   @db.NVarChar(256)
  title                   String?   @db.NVarChar(256)
  description             String?   @db.NText
  project                 BigInt?
  identicalVersionPK      BigInt?
  version                 BigInt?
  tester                  String?   @db.NVarChar(256)
  status                  String?   @db.NVarChar(256)
  priority                String?   @db.NVarChar(256)
  classification          String?   @db.NVarChar(256)
  lastEdited              DateTime? @db.DateTime
  lastEditorPK            BigInt?
  created                 BigInt?
  defectManagementSystem  String?   @db.NVarChar(256)
  defectManagementProject String?   @db.NVarChar(256)
  revision                BigInt?   @default(0, map: "DF__ErrorIDBe__revis__324DF687")

  @@index([identicalVersionPK], map: "idx_errb_identicalVersionPK")
  @@index([project, version], map: "idx_errb_projectPK_versionPK")
}

model ErrorIDRefRelBean {
  PK       BigInt  @id(map: "pk_ErrorIDRefRelBean") @default(autoincrement())
  errorPK  BigInt?
  fileName String? @db.NVarChar(2000)
  revision BigInt? @default(0, map: "DF__ErrorIDRe__revis__352A6332")
}

model ExecInfoRefRelBean {
  PK            BigInt  @id(map: "pk_ExecInfoRefRelBean") @default(autoincrement())
  referenceBean BigInt?
  execInfoBean  BigInt?
  revision      BigInt? @default(0, map: "DF__ExecInfoR__revis__3DBFA933")

  @@index([referenceBean], map: "idx_execrefb_refPK")
  @@index([execInfoBean], map: "idx_refb_execPK")
}

model ExecInformationBean {
  PK                             BigInt    @id(map: "pk_ExecInformationBean") @default(autoincrement())
  testCaseNodePK                 BigInt?
  specInfoPK                     BigInt?
  testCyclePK                    BigInt?
  testCase                       Boolean
  identicalVersionPK             BigInt?
  status                         Int
  responsible                    BigInt
  priority                       Int
  reviewer                       BigInt
  locker                         BigInt
  targetDate                     DateTime? @db.DateTime
  execStatus                     Int
  verdictStatus                  Int
  comments                       BigInt?
  testProtocolLocation           String?   @db.NVarChar(256)
  testExecutionEngine            String?   @db.NVarChar(256)
  verdictEvaluator               String?   @db.NVarChar(256)
  scriptPath                     String?   @db.NVarChar(256)
  plannedExecutionDuration       BigInt
  actualExecutionDuration        BigInt
  ordering                       String?   @db.NVarChar(256)
  TestThemeBean_execInformations BigInt?
  version                        BigInt?
  TestCaseBean_execInformations  BigInt?
  checkableIn                    Boolean?
  revision                       BigInt?   @default(0, map: "DF__ExecInfor__revis__19B752E7")

  @@index([comments], map: "idx_execb_comments")
  @@index([testCyclePK], map: "idx_execb_cyclePK")
  @@index([testCyclePK, TestCaseBean_execInformations], map: "idx_execb_cyclePK_tcbeiPK")
  @@index([testCyclePK, TestThemeBean_execInformations], map: "idx_execb_cyclePK_ttbeiPK")
  @@index([locker], map: "idx_execb_lockerPK")
  @@index([PK, testCyclePK], map: "idx_execb_PK_cyclePK")
  @@index([PK, version], map: "idx_execb_PK_version")
  @@index([responsible], map: "idx_execb_responsiblePK")
  @@index([reviewer], map: "idx_execb_reviewerPK")
  @@index([specInfoPK], map: "idx_execb_specPK")
  @@index([TestCaseBean_execInformations], map: "idx_execb_tcbeiPK")
  @@index([testCaseNodePK], map: "idx_execb_tcnPK")
  @@index([testCaseNodePK, locker], map: "idx_execb_tcnPK_locker")
  @@index([testCaseNodePK, version], map: "idx_execb_tcnPK_version")
  @@index([TestThemeBean_execInformations], map: "idx_execb_ttbeiPK")
}

model ExecParamCombErrorIDRelBean {
  PK                       BigInt  @id(map: "pk_ExecParameterCombinationErrorIDRelBean") @default(autoincrement())
  ordering                 Int
  execParameterCombination BigInt?
  errorID                  BigInt?
  revision                 BigInt? @default(0, map: "DF__ExecParam__revis__4EEA3535")

  @@index([errorID], map: "idx_errb_errorPK")
  @@index([execParameterCombination], map: "idx_errb_execParamPK")
}

model ExecParamCombRefRelBean {
  PK                BigInt  @id(map: "pk_ExecParamCombRefRelBean") @default(autoincrement())
  referenceBean     BigInt?
  execParamCombBean BigInt?
  revision          BigInt? @default(0, map: "DF__ExecParam__revis__409C15DE")

  @@index([referenceBean], map: "idx_epcrefb_refPK")
  @@index([execParamCombBean], map: "idx_refb_execParamPK")
}

model ExecParamCombValueBean {
  PK                  BigInt  @id(map: "pk_ExecParamCombValueBean") @default(autoincrement())
  type                Int
  ordering            Int
  parentPK            BigInt?
  instancesArray      BigInt?
  representativeValue BigInt?
  equivalenceClass    BigInt?
  textRepresentative  String? @db.NText
  dataTypePK          BigInt?
  revision            BigInt? @default(0, map: "DF__ExecParam__revis__29B8B086")

  @@index([dataTypePK], map: "idx_epcb_dataTypePK")
  @@index([parentPK], map: "idx_epcb_parentPK")
  @@index([representativeValue, parentPK], map: "idx_epcb_repPK_parentPK")
}

model ExecParameterCombinationBean {
  PK                BigInt  @id(map: "pk_ExecParameterCombinationBean") @default(autoincrement())
  execInformationID BigInt?
  paramCombID       BigInt?
  uniqueID          String? @db.VarChar(64)
  status            BigInt
  verdict           BigInt
  execStatus        BigInt
  actualDuration    BigInt
  plannedDuration   BigInt
  errorID           String? @db.NVarChar(256)
  ordering          Int
  testerPK          BigInt
  comments          BigInt?
  revision          BigInt? @default(0, map: "DF__ExecParam__revis__1C93BF92")

  @@index([comments], map: "idx_epcb_comments")
  @@index([execInformationID], map: "idx_epcb_execPK")
  @@index([execInformationID, paramCombID], map: "idx_epcb_execPK_pcPK")
  @@index([paramCombID], map: "idx_epcb_pcPK")
  @@index([uniqueID], map: "idx_epcb_uniqueid")
}

model ExecScriptBean {
  PK               BigInt  @id(map: "pk_ExecScriptBean") @default(autoincrement())
  execPK           BigInt?
  name             String? @db.NVarChar(256)
  type             Int?
  execScriptFilePK BigInt?
  resultFilePK     BigInt?
  revision         BigInt? @default(0, map: "DF__ExecScrip__revis__51C6A1E0")

  @@index([execPK], map: "idx_esb_execPK")
}

model ExecScriptFileBean {
  PK       BigInt  @id(map: "pk_ExecScriptFileBean") @default(autoincrement())
  script   Bytes?  @db.Image
  encoding String? @db.NVarChar(50)
  revision BigInt? @default(0, map: "DF__ExecScrip__revis__54A30E8B")
}

model FileBlockBean {
  PK         BigInt  @id(map: "pk_FileBlockBean") @default(autoincrement())
  fileInfoPK BigInt?
  content    Bytes?  @db.Image
  revision   BigInt? @default(0, map: "DF__FileBlock__revis__2D543740")
}

model FileBufferBean {
  PK       BigInt  @id(map: "pk_FileBufferBean") @default(autoincrement())
  buffer   Bytes?  @db.Image
  revision BigInt? @default(0, map: "DF__FileBuffe__revis__1F702C3D")
}

model FileInfoBean {
  PK           BigInt    @id(map: "pk_FileInfoBean") @default(autoincrement())
  login        String?   @db.NVarChar(255)
  creationDate DateTime? @db.DateTime
  revision     BigInt?   @default(0, map: "DF__FileInfoB__revis__2A77CA95")
}

model FilterInfoBean {
  PK               BigInt   @id(map: "pk_FilterInfoBean") @default(autoincrement())
  value_pk         BigInt?
  value_ttPK       BigInt?
  value_name       String?  @db.NVarChar(256)
  value_ownerPK    BigInt?
  value_userPK     BigInt?
  value_active     Boolean?
  value_global     Boolean?
  value_filterType Int?
  value_cyclePK    BigInt?
  revision         BigInt?  @default(0, map: "DF__FilterInf__revis__224C98E8")

  @@index([value_ttPK], map: "idx_fib_ttPK")
  @@index([value_userPK, value_global], map: "idx_fib_userPK_global")
  @@index([value_userPK, value_global, value_ttPK], map: "idx_fib_userPK_global_ttPK")
}

model IdentVersDataTypeMapBean {
  PK                  BigInt   @id(map: "pk_IdentVersDataTypeMapBean") @default(autoincrement())
  workDataTypePK      BigInt?
  versionedDataTypePK BigInt?
  defTypeChanged      Boolean?
  revision            BigInt?  @default(0, map: "DF__IdentVers__revis__21E28494")
}

model ImageBean {
  PK        BigInt    @id(map: "pk_ImageBean") @default(autoincrement())
  suffix    String?   @db.NVarChar(256)
  genesis   DateTime? @db.DateTime
  imageData Bytes?    @db.Image
}

model ImportPropertiesBean {
  PK                     BigInt   @id(map: "pk_ImportPropertiesBean") @default(autoincrement())
  userPK                 BigInt?
  equalityType           Int?
  tdElemetsTypeImport    Int?
  ttElemetsTypeImport    Int?
  compareDataStructurTDE Boolean?
  compareDataStructurTT  Boolean?
  importRequirements     Int?
  importUDF              Boolean?
  importDefectUDF        Boolean?
  importReferences       Boolean?
  importKeywords         Boolean?
  importTestThemeVeiw    Boolean?
  importDefects          Int?
  importDefectsMode      Int?
  importFilePath         String?  @db.NVarChar(256)
  revision               BigInt?  @default(0, map: "DF__ImportPro__revis__10B7F892")
}

model InspectionDefinitionBean {
  PK              BigInt  @id(map: "pk_InspectionDefinitionBean")
  name            String  @db.NVarChar(256)
  defaultSeverity Int     @db.TinyInt
  checksum        BigInt
  description     BigInt
  implementation  BigInt
  enabled         Boolean
  revision        BigInt  @default(0, map: "DF__Inspectio__revis__38C5E9EC")
}

model InspectionImplementationBean {
  PK       BigInt @id(map: "pk_InspectionImplementationBean") @default(autoincrement())
  buffer   Bytes
  revision BigInt @default(0, map: "DF__Inspectio__revis__3BA25697")
}

model InspectionPerProjectBean {
  PK           BigInt  @id(map: "pk_InspectionPerProjectBean") @default(autoincrement())
  projectPK    BigInt?
  inspectionPK BigInt?
  severity     Int?
  revision     BigInt? @default(0, map: "DF__Inspectio__revis__35E97D41")

  @@index([projectPK], map: "idx_ippb_project")
  @@index([projectPK, inspectionPK], map: "idx_ippb_project_inspection")
}

model InstanceBean {
  PK               BigInt  @id(map: "pk_InstanceBean") @default(autoincrement())
  objectVersionPK  BigInt?
  historyPK        BigInt?
  instancesArrayPK BigInt?
  dataTypePK       BigInt?
  ordering         Int
  revision         BigInt? @default(0, map: "DF__InstanceB__revis__27114E05")

  @@index([dataTypePK], map: "idx_instb_dtPK")
  @@index([instancesArrayPK], map: "idx_instb_iaPK")
  @@index([instancesArrayPK, ordering], map: "idx_instb_iaPK_ordering")
}

model InstancesArrayBean {
  PK              BigInt  @id(map: "pk_InstancesArrayBean") @default(autoincrement())
  objectVersionPK BigInt?
  historyPK       BigInt?
  dataTypePK      BigInt?
  name            String? @db.NVarChar(256)
  description     String? @db.NVarChar(256)
  ordering        Int
  revision        BigInt? @default(0, map: "DF__Instances__revis__29EDBAB0")

  @@index([dataTypePK], map: "idx_iab_dtPK")
  @@index([dataTypePK, name], map: "idx_iab_dtPK_name")
  @@index([dataTypePK, ordering], map: "idx_iab_dtPK_ordering")
}

model InstanceValueBean {
  PK                  BigInt  @id(map: "pk_InstanceValueBean") @default(autoincrement())
  type                Int
  ordering            Int
  dataTypePK          BigInt?
  parentPK            BigInt?
  instancesArray      BigInt?
  representativeValue BigInt?
  equivalenceClass    BigInt?
  revision            BigInt? @default(0, map: "DF__InstanceV__revis__2F7189DC")

  @@index([dataTypePK], map: "idx_instvb_dtPK")
  @@index([instancesArray, parentPK, type], map: "idx_instvb_ia_parentPK_type")
  @@index([parentPK], map: "idx_instvb_parentPK")
  @@index([representativeValue, parentPK, type], map: "idx_instvb_repv_parentPK_type")
}

model IssueBean {
  PK                 BigInt  @id(map: "pk_IssueBean") @default(autoincrement())
  summaryPK          BigInt?
  tovPK              BigInt?
  cyclePK            BigInt?
  inspectionPK       BigInt?
  typeOfAffectedItem Int?
  affectedItemPK     BigInt?
  destination        Int?
  revision           BigInt? @default(0, map: "DF__IssueBean__revis__330D1096")

  @@index([cyclePK], map: "idx_ib_cycle")
  @@index([summaryPK], map: "idx_ib_summary")
  @@index([tovPK], map: "idx_ib_tov")
  @@index([typeOfAffectedItem, affectedItemPK], map: "idx_ib_type_pk")
}

model IssueSummaryBean {
  PK             BigInt    @id(map: "pk_IssueSummaryBean") @default(autoincrement())
  projectPK      BigInt?
  tovPK          BigInt?
  startInstant   DateTime? @db.DateTime
  endInstant     DateTime? @db.DateTime
  numberOfIssues Int?
  revision       BigInt?   @default(0, map: "DF__IssueSumm__revis__3030A3EB")

  @@index([projectPK], map: "idx_isb_project")
  @@index([tovPK], map: "idx_isb_tov")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model itb_version {
  version String? @db.VarChar(50)

  @@ignore
}

model JMS_MESSAGES {
  MESSAGEID   Int
  DESTINATION String  @db.VarChar(150)
  TXID        Int?
  TXOP        String? @db.Char(1)
  MESSAGEBLOB Bytes?  @db.Image

  @@id([MESSAGEID, DESTINATION], map: "PK__JMS_MESS__CD87D23D43E96E7C")
  @@index([DESTINATION], map: "JMS_MESSAGES_DESTINATION")
  @@index([TXOP, TXID], map: "JMS_MESSAGES_TXOP_TXID")
}

model JMS_TRANSACTIONS {
  TXID Int @id(map: "PK__JMS_TRAN__827BEF0E8DE5E00E")
}

model KeywordBean {
  PK                    BigInt                 @id(map: "pk_KeywordBean") @default(autoincrement())
  name                  String?                @db.NVarChar(256)
  projectPK             BigInt?
  tovPK                 BigInt?
  variantsDefinitionPK  BigInt?
  revision              BigInt?                @default(0, map: "DF__KeywordBe__revis__5932B97E")
  TestProjectBean       TestProjectBean?       @relation(fields: [projectPK], references: [PK], onDelete: NoAction, onUpdate: NoAction, map: "fk_KeywordBean_projectPK")
  TestObjectVersionBean TestObjectVersionBean? @relation(fields: [tovPK], references: [PK], onDelete: NoAction, onUpdate: NoAction, map: "fk_KeywordBean_tovPK")
  VariantsDefinition    VariantsDefinition?    @relation(fields: [variantsDefinitionPK], references: [PK], onDelete: Cascade, onUpdate: NoAction, map: "fk_KeywordBean_varDefPK")
  KeywordSpecRelBean    KeywordSpecRelBean[]

  @@unique([projectPK, tovPK, name], map: "un_KeywordBean_pPK_tovPK_name")
  @@index([projectPK], map: "idx_kwb_projectPK")
  @@index([tovPK], map: "idx_kwb_tovPK")
  @@index([variantsDefinitionPK], map: "idx_kwb_varDefPK")
}

model KeywordSpecRelBean {
  PK                 BigInt               @id(map: "pk_KeywordSpecRelBean") @default(autoincrement())
  keyword            BigInt?
  keywordName        String?              @db.NVarChar(256)
  variantsMarker     Boolean?             @default(false, map: "DF__KeywordSp__varia__5EEB92D4")
  parentPK           BigInt?
  parentType         Int?
  revision           BigInt?              @default(0, map: "DF__KeywordSp__revis__5FDFB70D")
  KeywordBean        KeywordBean?         @relation(fields: [keyword], references: [PK], onDelete: Cascade, onUpdate: NoAction, map: "fk_KeywordSpecRelBean_keyword")
  TestSequenceMarker TestSequenceMarker[]

  @@index([parentPK, parentType], map: "idx_kwspecrb_parentPK_type")
  @@index([parentPK, parentType, keyword], map: "idx_kwspecrb_parentPK_type_kwPK")
}

model LibraryDependencyBean {
  PK                BigInt  @id(map: "pk_LibraryDependencyBean") @default(autoincrement())
  name              String? @db.NVarChar(256)
  callingTovPK      BigInt?
  callingLibraryPK  BigInt?
  callingBaselinePK BigInt?
  calledLibraryPK   BigInt?
  foreignTovPK      BigInt?
  foreignLibraryPK  BigInt?
  baselinePK        BigInt?
  version           String? @db.NVarChar(256)
}

model Licenses {
  licenseType String @unique(map: "UQ__Licenses__6EBBE4B195415F72") @db.NVarChar(255)
  licenseKey  String @db.NVarChar(2048)
}

model MetawordBean {
  PK                        BigInt  @id(map: "pk_MetawordBean") @default(autoincrement())
  parentPK                  BigInt?
  callType                  Int?
  elementName               String? @db.NVarChar(256)
  uniqueID                  String? @db.VarChar(32)
  parentUID                 String? @db.VarChar(32)
  locker                    BigInt?
  objectVersionPK           BigInt?
  libraryPK                 BigInt?
  identicalVersionPK        BigInt?
  historyPK                 BigInt?
  description               BigInt?
  status                    BigInt
  version                   BigInt?
  contentType               String? @db.VarChar(32)
  contentExternalIdentifier String? @db.NVarChar(256)
  contentPK                 BigInt?
  revision                  BigInt? @default(0, map: "DF__MetawordB__revis__2CCA275B")

  @@index([contentPK], map: "idx_mwb_contentPK")
  @@index([description], map: "idx_mwb_desc")
  @@index([identicalVersionPK], map: "idx_mwb_ivPK")
  @@index([locker], map: "idx_mwb_lockerPK")
  @@index([parentPK], map: "idx_mwb_parentPK")
  @@index([parentPK, locker, objectVersionPK], map: "idx_mwb_parentPK_locker_tovPK")
  @@index([parentPK, elementName], map: "idx_mwb_parentPK_name")
  @@index([parentPK, objectVersionPK], map: "idx_mwb_parentPK_tovPK")
  @@index([parentPK, version, objectVersionPK], map: "idx_mwb_parentPK_version_tovPK")
  @@index([objectVersionPK], map: "idx_mwb_tovPK")
  @@index([objectVersionPK, uniqueID], map: "idx_mwb_tovPK_uid")
}

model MetawordCallBean {
  PK                 BigInt               @id(map: "pk_MetawordCallBean") @default(autoincrement())
  callingMetawordPK  BigInt?
  calledMetawordPK   BigInt?
  type               Int
  phase              Int
  comments           BigInt?
  description        BigInt?
  ordering           Int
  revision           BigInt?              @default(0, map: "DF__MetawordC__revis__2FA69406")
  TestSequenceMarker TestSequenceMarker[]

  @@index([calledMetawordPK], map: "idx_mwcb_calledmwPK")
  @@index([callingMetawordPK], map: "idx_mwcb_callingmwPK")
  @@index([comments], map: "idx_mwcb_comments")
  @@index([description], map: "idx_mwcb_description")
}

model MetawordCallErrorIDRelBean {
  PK           BigInt  @id(map: "pk_MetawordCallErrorIDRelBean") @default(autoincrement())
  ordering     Int
  metawordCall BigInt?
  errorID      BigInt?
  revision     BigInt? @default(0, map: "DF__MetawordC__revis__4C0DC88A")
}

model MetawordCallParameterBean {
  PK                  BigInt   @id(map: "pk_MetawordCallParameterBean") @default(autoincrement())
  parameterValueType  Int
  ordering            Int
  representativeValue BigInt?
  parameterDataType   BigInt?
  metawordCall        BigInt?
  instancesArrayValue BigInt?
  parameterValue      BigInt?
  defaultValue        Boolean?
  revision            BigInt?  @default(0, map: "DF__MetawordC__revis__328300B1")

  @@index([instancesArrayValue], map: "idx_mwcpb_iavPK")
  @@index([metawordCall], map: "idx_mwcpb_mwcPK")
  @@index([parameterValue], map: "idx_mwcpb_paramPK")
  @@index([representativeValue], map: "idx_mwcpb_repvPK")
}

model MetawordConditionRelBean {
  PK           BigInt   @id(map: "pk_MetawordConditionRelBean") @default(autoincrement())
  ordering     Int?
  precondition Boolean?
  metaword     BigInt?
  condition    BigInt?
  revision     BigInt?  @default(0, map: "DF__MetawordC__revis__355F6D5C")

  @@index([condition], map: "idx_mwcrb_cdPK")
  @@index([metaword], map: "idx_mwcrb_mwPK")
  @@index([metaword, condition, precondition], map: "idx_mwcrb_mwPK_cdPK_precond")
}

model MetawordContentBean {
  PK       BigInt  @id(map: "pk_MetawordContentBean") @default(autoincrement())
  buffer   String? @db.NText
  revision BigInt? @default(0, map: "DF__MetawordC__revis__40D12008")
}

model MetawordParameterBean {
  PK             BigInt  @id(map: "pk_MetawordParameterBean") @default(autoincrement())
  elementName    String? @db.NVarChar(2000)
  definitionType Int
  useType        Int
  metawordPK     BigInt?
  ordering       Int
  dataType       BigInt?
  valueType      Int
  defaultValue   BigInt?
  signatureUID   String? @db.VarChar(64)
  revision       BigInt? @default(0, map: "DF__MetawordP__revis__383BDA07")

  @@index([dataType], map: "idx_mwpb_dtPK")
  @@index([dataType, metawordPK], map: "idx_mwpb_dtPK_mwPK")
  @@index([dataType, metawordPK, definitionType], map: "idx_mwpb_dtPK_mwPK_defType")
  @@index([metawordPK], map: "idx_mwpb_mwPK")
  @@index([PK, dataType], map: "idx_mwpb_pk_dtPK")
}

model MetawordRefRelBean {
  PK            BigInt  @id(map: "pk_MetawordRefRelBean") @default(autoincrement())
  referenceBean BigInt?
  metawordBean  BigInt?
  revision      BigInt? @default(0, map: "DF__MetawordR__revis__43788289")

  @@index([referenceBean], map: "idx_mwrefb_refPK")
  @@index([metawordBean], map: "idx_refb_mwPK")
}

model MwCallParamDTSeqRelBean {
  PK                    BigInt  @id(map: "pk_MwCallParamDTSeqRelBean") @default(autoincrement())
  ordering              String? @db.NVarChar(256)
  metawordCallParameter BigInt?
  dataTypeSequence      BigInt?
  revision              BigInt? @default(0, map: "DF__MwCallPar__revis__3B1846B2")

  @@index([metawordCallParameter, dataTypeSequence], map: "idx_mwcpdtsrb_mwcpPK_dtsPK")
}

model NewlyCreatedDataTypeValueBean {
  PK              BigInt  @id(map: "pk_NewlyCreatedValueBean") @default(autoincrement())
  userPK          BigInt?
  objectVersionPK BigInt?
  dataTypePK      BigInt?
  valueType       Int?
  valuePK         BigInt?

  @@index([dataTypePK], map: "idx_NewDTValue_dataTypePK")
  @@index([objectVersionPK], map: "idx_NewDTValue_tovPK")
  @@index([userPK], map: "idx_NewDTValue_userPK")
}

model ParameterCombinationBean {
  PK                     BigInt                   @id(map: "pk_ParameterCombinationBean") @default(autoincrement())
  specInfoPK             BigInt?
  uniqueID               String?                  @db.VarChar(64)
  comments               BigInt?
  ordering               Int
  revision               BigInt?                  @default(0, map: "DF__Parameter__revis__3DF4B35D")
  RequirementTestCaseRel RequirementTestCaseRel[]

  @@index([comments], map: "idx_pcb_comments")
  @@index([PK, specInfoPK], map: "idx_pcb_pk_specPK")
  @@index([specInfoPK], map: "idx_pcb_specPK")
  @@index([specInfoPK, ordering], map: "idx_pcb_specPK_ordering")
  @@index([uniqueID], map: "idx_pcb_uniqueid")
}

model Placeholder {
  PK               BigInt             @id(map: "pk_Placeholder") @default(autoincrement())
  tovPK            BigInt
  name             String?            @db.NVarChar(256)
  description      String?            @db.NText
  PlaceholderValue PlaceholderValue[]

  @@unique([tovPK, name], map: "un_Placeholder_tovPK_name")
  @@index([tovPK], map: "idx_Placeholder_tovPK")
}

model PlaceholderValue {
  PK                    BigInt                @id(map: "pk_PlaceholderValue") @default(autoincrement())
  placeholderPK         BigInt
  variantsDefinitionPK  BigInt
  placeholderValue      String?               @db.NVarChar(2000)
  baseTOVPK             BigInt
  Placeholder           Placeholder           @relation(fields: [placeholderPK], references: [PK], onDelete: Cascade, onUpdate: NoAction, map: "fk_PlaceholderValue_Pholder")
  TestObjectVersionBean TestObjectVersionBean @relation(fields: [baseTOVPK], references: [PK], onUpdate: NoAction, map: "fk_PlaceholderValue_TOV")
  VariantsDefinition    VariantsDefinition    @relation(fields: [variantsDefinitionPK], references: [PK], onDelete: Cascade, onUpdate: NoAction, map: "fk_PlaceholderValue_VarDef")

  @@unique([placeholderPK, variantsDefinitionPK], map: "un_PlaceholderValue_phPK_vdPK")
  @@index([baseTOVPK], map: "idx_PlaceholderValue_baseTOV")
  @@index([variantsDefinitionPK], map: "idx_PlaceholderValue_varDef")
}

model PluginBean {
  PK                    BigInt                  @id(map: "pk_PluginBean") @default(autoincrement())
  name                  String?                 @db.NVarChar(256)
  userPK                BigInt?
  description           BigInt?
  type                  Int?
  dataType              Int?
  checksum              String?                 @db.NVarChar(10)
  projectsTreeVisible   Boolean
  treeType              Int?
  callString            String?                 @db.NVarChar(256)
  settingsString        String?                 @db.NVarChar(356)
  processorFileDate     DateTime?               @db.DateTime
  processorFileName     String?                 @db.NVarChar(256)
  processorFileBuffer   BigInt?
  sampleFileDate        DateTime?               @db.DateTime
  sampleFileName        String?                 @db.NVarChar(256)
  sampleFileBuffer      BigInt?
  encoding              String?                 @db.NVarChar(50)
  fontFilePath          String?                 @db.NVarChar(256)
  fontName              String?                 @db.NVarChar(256)
  isPublic              Boolean?                @default(false, map: "DF__PluginBea__isPub__43AD8CB3")
  revision              BigInt?                 @default(0, map: "DF__PluginBea__revis__44A1B0EC")
  PluginQuickAccessBean PluginQuickAccessBean[]

  @@index([description], map: "idx_pb_comments")
}

model PluginQuickAccessBean {
  PK              BigInt           @id(map: "pk_PluginQuickAccessBean") @default(autoincrement())
  projectPK       BigInt?
  pluginPK        BigInt?
  ordering        Int
  scope           Int
  PluginBean      PluginBean?      @relation(fields: [pluginPK], references: [PK], onDelete: Cascade, onUpdate: NoAction, map: "fk_PQABean_pluginPK")
  TestProjectBean TestProjectBean? @relation(fields: [projectPK], references: [PK], onDelete: Cascade, onUpdate: NoAction, map: "fk_PQABean_projectPK")

  @@unique([projectPK, pluginPK, scope], map: "un_PQABean_projPK_pluPK_scope")
}

model PluginResourceBean {
  PK             BigInt  @id(map: "pk_PluginResourcesBean") @default(autoincrement())
  name           String? @db.NVarChar(256)
  checksum       String? @db.NVarChar(10)
  fileName       String? @db.NVarChar(256)
  resourceFilePK BigInt?
  revision       BigInt? @default(0, map: "DF__PluginRes__revis__1394653D")
}

model PluginResourceRelBean {
  PK         BigInt  @id(map: "pk_PluginResourcesRelBean") @default(autoincrement())
  pluginID   BigInt?
  resourceID BigInt?
  revision   BigInt? @default(0, map: "DF__PluginRes__revis__1670D1E8")
}

model PluginUserBean {
  PK       BigInt  @id(map: "pk_PluginUserBean") @default(autoincrement())
  userPK   BigInt?
  pluginPK BigInt?
  revision BigInt? @default(0, map: "DF__PluginUse__revis__477E1D97")
}

model PreferenceColumnBean {
  PK            BigInt  @id(map: "pk_PreferenceColumnBean") @default(autoincrement())
  preferencesPK BigInt?
  value         Int?
  ordering      Int?
  revision      BigInt? @default(0, map: "DF__Preferenc__revis__4A5A8A42")
}

model PreferenceFiletypeBean {
  PK            BigInt  @id(map: "pk_PreferenceFiletypeBean") @default(autoincrement())
  preferencesPK BigInt?
  fileEnding    String? @db.NVarChar(256)
  editorPath    String? @db.NVarChar(256)
  ordering      Int?
  revision      BigInt? @default(0, map: "DF__Preferenc__revis__4D36F6ED")
}

model PreferenceOpenedSuiteFrmsBean {
  PK                  BigInt  @id(map: "pk_PreferenceOpenedSuiteFrmsBean") @default(autoincrement())
  preferencesPK       BigInt?
  value_posX          Int?
  value_posY          Int?
  value_width         Int?
  value_height        Int?
  value_type          Int?
  value_state         Int?
  value_projectPK     BigInt?
  value_objectVersion BigInt?
  value_testCycle     BigInt?
  value_statusView    Int?
  ordering            Int?
  revision            BigInt? @default(0, map: "DF__Preferenc__revis__50136398")
}

model PreferencesBean {
  PK                           BigInt   @id(map: "pk_PreferencesBean") @default(autoincrement())
  userPK                       BigInt?
  mainFrame_posX               Int?
  mainFrame_posY               Int?
  mainFrame_width              Int?
  mainFrame_height             Int?
  mainFrame_state              Int?
  projectAdminFrame_posX       Int?
  projectAdminFrame_posY       Int?
  projectAdminFrame_width      Int?
  projectAdminFrame_height     Int?
  projectAdminFrame_state      Int?
  userAdminFrame_posX          Int?
  userAdminFrame_posY          Int?
  userAdminFrame_width         Int?
  userAdminFrame_height        Int?
  userAdminFrame_state         Int?
  filterAdminFrame_posX        Int?
  filterAdminFrame_posY        Int?
  filterAdminFrame_width       Int?
  filterAdminFrame_height      Int?
  filterAdminFrame_state       Int?
  pluginAdminFrame_posX        Int?
  pluginAdminFrame_posY        Int?
  pluginAdminFrame_width       Int?
  pluginAdminFrame_height      Int?
  pluginAdminFrame_state       Int?
  preferencesAdminFrame_posX   Int?
  preferencesAdminFrame_posY   Int?
  preferencesAdminFrame_width  Int?
  preferencesAdminFrame_height Int?
  preferencesAdminFrame_state  Int?
  referencesAdminFrame_posX    Int?
  referencesAdminFrame_posY    Int?
  referencesAdminFrame_width   Int?
  referencesAdminFrame_height  Int?
  referencesAdminFrame_state   Int?
  varManagementFrame_posX      Int?
  varManagementFrame_posY      Int?
  varManagementFrame_width     Int?
  varManagementFrame_height    Int?
  varManagementFrame_state     Int?
  issueListFrame_posX          Int?
  issueListFrame_posY          Int?
  issueListFrame_width         Int?
  issueListFrame_height        Int?
  issueListFrame_state         Int?
  numbering                    Boolean
  elementNameDisplay           Boolean
  userNameDisplay              Boolean
  statusView                   Int
  unlockAll                    Boolean
  defaultEditor                String?  @db.NVarChar(256)
  copyBetweenObjectVersions    Int
  copyInObjectVersion          Int
  copyBetweenProjects          Int
  xmlPath                      String?  @db.NVarChar(256)
  iTorxPath                    String?  @db.NVarChar(256)
  reportFilePath               String?  @db.NVarChar(256)
  reportChosenSetting          Int?
  reportExpandsData            Boolean?
  showImportMessage            Boolean?
  exitConfirm                  Boolean?
  displayTcExecTime            Boolean? @default(true, map: "DF__Preferenc__displ__52EFD043")
  uidDisplay                   Boolean?
  checkParameterChanges        Boolean?
  autoInitMwCallParams         Int
  openRefBehavior              Int?
  referencePath                String?  @db.NVarChar(256)
  revision                     BigInt?  @default(0, map: "DF__Preferenc__revis__53E3F47C")
  insignificantErrorTreatment  Int
  tfp_ttDesc                   Boolean? @default(false, map: "DF__Preferenc__tfp_t__54D818B5")
  tfp_ttReview                 Boolean? @default(false, map: "DF__Preferenc__tfp_t__55CC3CEE")
  tfp_tcsDesc                  Boolean? @default(false, map: "DF__Preferenc__tfp_t__56C06127")
  tfp_tcsReview                Boolean? @default(false, map: "DF__Preferenc__tfp_t__57B48560")
  tfp_interaction              Boolean? @default(false, map: "DF__Preferenc__tfp_i__58A8A999")
  tfp_iaComment                Boolean? @default(true, map: "DF__Preferenc__tfp_i__599CCDD2")
  tfp_tcSpecComment            Boolean? @default(true, map: "DF__Preferenc__tfp_t__5A90F20B")
  tfp_ttRemark                 Boolean? @default(false, map: "DF__Preferenc__tfp_t__5B851644")
  tfp_tcsRemark                Boolean? @default(false, map: "DF__Preferenc__tfp_t__5C793A7D")
  tfp_tcExecComment            Boolean? @default(true, map: "DF__Preferenc__tfp_t__5D6D5EB6")
  tfp_ttExecViewRemark         Boolean? @default(false, map: "DF__Preferenc__tfp_t__5E6182EF")
  tfp_tcsExecViewRemark        Boolean? @default(false, map: "DF__Preferenc__tfp_t__5F55A728")
  tfp_tcExecViewComment        Boolean? @default(true, map: "DF__Preferenc__tfp_t__6049CB61")
  tfp_subdivDesc               Boolean? @default(false, map: "DF__Preferenc__tfp_s__613DEF9A")
  tfp_interactionDesc          Boolean? @default(false, map: "DF__Preferenc__tfp_i__623213D3")
  tfp_elemsIAComment           Boolean? @default(true, map: "DF__Preferenc__tfp_e__6326380C")
  tfp_datatypeDesc             Boolean? @default(false, map: "DF__Preferenc__tfp_d__641A5C45")
  tfp_condDesc                 Boolean? @default(false, map: "DF__Preferenc__tfp_c__650E807E")
  tfp_pluginsDesc              Boolean? @default(false, map: "DF__Preferenc__tfp_p__6602A4B7")
  tfp_adminInspectionDesc      Boolean? @default(false, map: "DF__Preferenc__tfp_a__66F6C8F0")
  tfp_projectInspectionDesc    Boolean? @default(false, map: "DF__Preferenc__tfp_p__67EAED29")
  tfp_variantsDefinitionDesc   Boolean? @default(false, map: "DF__Preferenc__tfp_v__68DF1162")

  @@index([userPK], map: "idx_prefb_userPK")
}

model ProjectDefectSettingsBean {
  PK                   BigInt    @id(map: "pk_ProjectDefectSettingsBean") @default(autoincrement())
  system               String?   @db.NVarChar(256)
  project              String?   @db.NVarChar(256)
  readLogin            String?   @db.NVarChar(256)
  readPassword         String?   @db.NVarChar(256)
  manualSync           Boolean?
  firstSyncTime        DateTime? @db.DateTime
  syncInterval         BigInt?
  lastSyncTime         DateTime? @db.DateTime
  lastSyncStatus       Int?
  lastSyncProtocol     BigInt?
  statusAttribute      String?   @db.NVarChar(256)
  statusSyncOption     Int?
  statusDefaultValue   String?   @db.NVarChar(256)
  statusValues         String?   @db.NText
  priorityAttribute    String?   @db.NVarChar(256)
  prioritySyncOption   Int?
  priorityDefaultValue String?   @db.NVarChar(256)
  priorityValues       String?   @db.NText
  classAttribute       String?   @db.NVarChar(256)
  classSyncOption      Int?
  classDefaultValue    String?   @db.NText
  classValues          String?   @db.NVarChar(1024)
  revision             BigInt?   @default(0, map: "DF__ProjectDe__revis__79D4933A")
}

model ProjectUserBean {
  PK        BigInt  @id(map: "pk_ProjectUserBean") @default(autoincrement())
  userPK    BigInt?
  projectPK BigInt?
  revision  BigInt? @default(0, map: "DF__ProjectUs__revis__6BBB7E0D")

  @@index([projectPK], map: "idx_pub_projPK")
  @@index([projectPK, userPK], map: "idx_pub_projPK_user")
  @@index([userPK], map: "idx_pub_user")
}

model ReferenceBean {
  PK                 BigInt  @id(map: "pk_ReferenceBean") @default(autoincrement())
  filename           String? @db.NVarChar(2000)
  projectPK          BigInt?
  refType            Int?
  attachmentPK       BigInt?
  version            BigInt?
  identicalVersionPK BigInt?
  revision           BigInt? @default(0, map: "DF__Reference__revis__6E97EAB8")

  @@index([attachmentPK], map: "idx_refb_attPK")
  @@index([identicalVersionPK], map: "idx_refb_ivPK")
  @@index([projectPK], map: "idx_refb_projectPK")
  @@index([projectPK], map: "idx_refb_projectPK_filename")
}

model RepresentativeBean {
  PK                 BigInt  @id(map: "pk_RepresentativeBean") @default(autoincrement())
  objectVersionPK    BigInt?
  historyPK          BigInt?
  equivalenceClassPK BigInt?
  contentType        Int?
  contentPK          BigInt?
  name               String? @db.NText
  nameHashCode       Int?
  dataTypePK         BigInt?
  ordering           Int
  revision           BigInt? @default(0, map: "DF__Represent__revis__71745763")

  @@index([contentType], map: "idx_repb_contentType")
  @@index([contentType, contentPK], map: "idx_repb_contentType_contentPK")
  @@index([dataTypePK], map: "idx_repb_dtPK")
  @@index([equivalenceClassPK], map: "idx_repb_ecPK")
  @@index([equivalenceClassPK, ordering], map: "idx_repb_ecPK_ordering")
  @@index([nameHashCode, dataTypePK], map: "idx_repb_nameHashCode_dt")
  @@index([nameHashCode, equivalenceClassPK], map: "idx_repb_nameHashCode_eq")
}

model RepresentativeValueBean {
  PK                  BigInt  @id(map: "pk_RepresentativeValueBean") @default(autoincrement())
  type                Int
  ordering            Int
  dataTypePK          BigInt?
  parentPK            BigInt?
  instancesArray      BigInt?
  representativeValue BigInt?
  equivalenceClass    BigInt?
  revision            BigInt? @default(0, map: "DF__Represent__revis__2C951D31")

  @@index([dataTypePK], map: "idx_repvb_dtPK")
  @@index([instancesArray, parentPK, type], map: "idx_repvb_ia_parentPK_type")
  @@index([parentPK], map: "idx_repvb_parentPK")
  @@index([representativeValue, parentPK, type], map: "idx_repvb_repv_parentPK_type")
}

model RequirementAttributeBean {
  PK             BigInt  @id(map: "pk_RequirementAttributeBean") @default(autoincrement())
  requirementPK  BigInt?
  attributeName  String? @db.NVarChar(256)
  attributeValue String? @db.NText
  revision       BigInt? @default(0, map: "DF__Requireme__revis__0269D93B")

  @@index([requirementPK], map: "idx_reqattr_requirementPK")
}

model RequirementBaselineBean {
  PK           BigInt    @id(map: "pk_RequirementBaselineBean") @default(autoincrement())
  projectPK    BigInt?
  name         String?   @db.NVarChar(256)
  project      String?   @db.NVarChar(256)
  lastUpdate   DateTime? @db.DateTime
  type         Int?
  repositoryID String?   @db.NVarChar(64)
  revision     BigInt?   @default(0, map: "DF__Requireme__revis__741BB9E4")

  @@index([projectPK], map: "idx_ReqBaseline_projectPK")
}

model RequirementBean {
  PK                     BigInt                   @id(map: "pk_RequirementBean") @default(autoincrement())
  name                   String?                  @db.NVarChar(256)
  ID                     String?                  @db.NVarChar(256)
  extendedID             String?                  @db.NVarChar(256)
  version                String?                  @db.NVarChar(64)
  owner                  String?                  @db.NVarChar(256)
  status                 String?                  @db.NVarChar(256)
  priority               String?                  @db.NVarChar(256)
  repositoryID           String?                  @db.NVarChar(64)
  revision               BigInt?                  @default(0, map: "DF__Requireme__revis__68AA0738")
  RequirementTestCaseRel RequirementTestCaseRel[]

  @@index([ID, version, repositoryID], map: "idx_req_ID_version_repID")
}

model RequirementNodeBean {
  PK            BigInt   @id(map: "pk_RequirementNodeBean") @default(autoincrement())
  parentPK      BigInt?
  baselinePK    BigInt?
  requirementPK BigInt?
  name          String?  @db.NVarChar(256)
  ID            String?  @db.NVarChar(256)
  version       String?  @db.NVarChar(64)
  requirement   Boolean?
  revision      BigInt?  @default(0, map: "DF__Requireme__revis__76F8268F")

  @@index([baselinePK], map: "idx_rn_baselinePK")
  @@index([baselinePK, requirement], map: "idx_rn_baselinePK_requirement")
  @@index([ID, version, baselinePK], map: "idx_rn_id_version_baselinePK")
  @@index([parentPK], map: "idx_rn_parentPK")
  @@index([parentPK, baselinePK], map: "idx_rn_parentPK_baselinePK")
  @@index([requirementPK], map: "idx_rn_requirementPK")
  @@index([requirementPK, baselinePK], map: "idx_rn_requirementPK_baselinePK")
}

model RequirementProjectBean {
  PK              BigInt  @id(map: "pk_RequirementProjectBean") @default(autoincrement())
  projectPK       BigInt?
  name            String? @db.NVarChar(256)
  reqRepositoryPK BigInt?
  revision        BigInt? @default(0, map: "DF__Requireme__revis__6E62E08E")

  @@index([projectPK], map: "idx_ReqProject_projectPK")
  @@index([reqRepositoryPK], map: "idx_ReqProject_repoPK")
}

model RequirementRepositoryBean {
  pk        BigInt  @id(map: "pk_RequirementRepositoryBean") @default(autoincrement())
  projectPK BigInt?
  name      String? @db.NVarChar(64)
  login     String? @db.NVarChar(256)
  password  String? @db.NVarChar(Max)
  revision  BigInt? @default(0, map: "DF__Requireme__revis__054645E6")
}

model RequirementSpecRelBean {
  PK              BigInt   @id(map: "pk_RequirementSpecRelBean") @default(autoincrement())
  requirement     BigInt?
  specInformation BigInt?
  edited          Boolean?
  revision        BigInt?  @default(0, map: "DF__Requireme__revis__6B8673E3")

  @@index([requirement], map: "idx_rsrb_req")
  @@index([requirement, specInformation], map: "idx_rsrb_req_spec")
  @@index([specInformation], map: "idx_rsrb_spec")
}

model RequirementsUDFBean {
  PK           BigInt  @id(map: "pk_RequirementsUDFBean") @default(autoincrement())
  udfName      String? @db.NVarChar(256)
  projectPK    BigInt?
  udfType      Int?
  repositoryID String? @db.NVarChar(64)
  revision     BigInt? @default(0, map: "DF__Requireme__revis__6014C137")

  @@index([projectPK], map: "idx_rudfb_projPK")
  @@index([projectPK, udfName], map: "idx_rudfb_projPK_name")
}

model RequirementTestCaseRel {
  PK                       BigInt                   @id(map: "pk_ReqTestCaseRel") @default(autoincrement())
  requirementPK            BigInt
  testCaseSpecPK           BigInt
  edited                   Boolean?                 @default(false, map: "DF__Requireme__edite__6B5169B9")
  RequirementBean          RequirementBean          @relation(fields: [requirementPK], references: [PK], onUpdate: NoAction, map: "fk_ReqTestCaseRel_reqPK")
  ParameterCombinationBean ParameterCombinationBean @relation(fields: [testCaseSpecPK], references: [PK], onDelete: Cascade, onUpdate: NoAction, map: "fk_ReqTestCaseRel_tcPK")

  @@unique([requirementPK, testCaseSpecPK], map: "un_ReqTestCaseRel_reqPK_tcPK")
  @@index([requirementPK], map: "idx_ReqTestCaseRel_req")
  @@index([testCaseSpecPK], map: "idx_ReqTestCaseRel_tcSpec")
}

model RichTextBean {
  PK                 BigInt               @id(map: "pk_RichTextBean") @default(autoincrement())
  html               String?              @db.NText
  plain              String?              @db.NText
  VariantsDefinition VariantsDefinition[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model RichTextImageRel {
  richText BigInt?
  image    BigInt?

  @@index([image], map: "idx_rtir_image")
  @@index([richText], map: "idx_rtir_richText")
  @@index([richText, image], map: "idx_rtir_richText_image")
  @@ignore
}

model SpecInfoRefRelBean {
  PK                  BigInt  @id(map: "pk_SpecInfoRefRelBean") @default(autoincrement())
  referenceBean       BigInt?
  specInformationBean BigInt?
  revision            BigInt? @default(0, map: "DF__SpecInfoR__revis__3806CFDD")

  @@index([specInformationBean], map: "idx_refb_specPK")
  @@index([referenceBean], map: "idx_specrefb_refPK")
}

model SpecInformationBean {
  PK                 BigInt    @id(map: "pk_SpecInformationBean") @default(autoincrement())
  name               String?   @db.NVarChar(256)
  testCaseNodePK     BigInt?
  testCase           Boolean
  identicalVersionPK BigInt?
  status             Int
  responsible        BigInt
  priority           Int
  reviewer           BigInt
  locker             BigInt
  targetDate         DateTime? @db.DateTime
  description        BigInt?
  reviewComments     BigInt?
  version            BigInt?
  metaword           BigInt?
  revision           BigInt?   @default(0, map: "DF__SpecInfor__revis__772D30B9")

  @@index([description], map: "idx_specb_desc")
  @@index([locker], map: "idx_specb_lockerPK")
  @@index([metaword], map: "idx_specb_mwPK")
  @@index([PK, locker], map: "idx_specb_pk_locker")
  @@index([PK, metaword], map: "idx_specb_pk_mwPK")
  @@index([PK, version], map: "idx_specb_pk_version")
  @@index([responsible], map: "idx_specb_responsiblePK")
  @@index([reviewComments], map: "idx_specb_revcom")
  @@index([reviewer], map: "idx_specb_reviewerPK")
  @@index([testCaseNodePK], map: "idx_specb_tcnPK")
  @@index([testCase], map: "idx_specb_testCase")
}

model SpecParamCombValueBean {
  PK                  BigInt   @id(map: "pk_SpecParamCombValueBean") @default(autoincrement())
  type                Int
  ordering            Int
  parentPK            BigInt?
  instancesArray      BigInt?
  representativeValue BigInt?
  equivalenceClass    BigInt?
  defaultValue        Boolean?
  revision            BigInt?  @default(0, map: "DF__SpecParam__revis__26DC43DB")

  @@index([equivalenceClass, instancesArray, representativeValue], map: "idx_spcb_ecPK_iaPK_repPK")
  @@index([equivalenceClass, parentPK], map: "idx_spcb_ecPK_parentPK")
  @@index([instancesArray, parentPK], map: "idx_spcb_iaPK_parentPK")
  @@index([parentPK], map: "idx_spcb_parentPK")
  @@index([representativeValue, parentPK], map: "idx_spcb_repPK_parentPK")
}

model SubdivisionBean {
  PK                  BigInt  @id(map: "pk_SubdivisionBean") @default(autoincrement())
  parentPK            BigInt?
  elementName         String? @db.NVarChar(256)
  uniqueID            String? @db.VarChar(32)
  parentUID           String? @db.VarChar(32)
  locker              BigInt?
  objectVersionPK     BigInt?
  libraryPK           BigInt?
  foreignLibraryTovPK BigInt?
  foreignLibraryPK    BigInt?
  identicalVersionPK  BigInt?
  historyPK           BigInt?
  description         BigInt?
  version             BigInt?
  revision            BigInt? @default(0, map: "DF__Subdivisi__revis__7A099D64")

  @@index([description], map: "idx_sdb_desc")
  @@index([identicalVersionPK], map: "idx_sdb_ivPK")
  @@index([locker], map: "idx_sdb_lockerPK")
  @@index([parentPK], map: "idx_sdb_parentPK")
  @@index([parentPK, elementName], map: "idx_sdb_parentPK_name")
  @@index([parentPK, elementName, objectVersionPK], map: "idx_sdb_parentPK_name_tovPK")
  @@index([parentPK, objectVersionPK], map: "idx_sdb_parentPK_tovPK")
  @@index([objectVersionPK], map: "idx_sdb_tovPK")
  @@index([objectVersionPK, locker], map: "idx_sdb_tovPK_lockerPK")
}

model SubdivisionRefRelBean {
  PK              BigInt  @id(map: "pk_SubdivisionRefRelBean") @default(autoincrement())
  referenceBean   BigInt?
  subdivisionBean BigInt?
  revision        BigInt? @default(0, map: "DF__Subdivisi__revis__49315BDF")
}

model TestCaseBean {
  PK              BigInt  @id(map: "pk_TestCaseBean") @default(autoincrement())
  parentPK        BigInt?
  name            String? @db.NVarChar(256)
  uniqueID        String? @db.VarChar(32)
  objectVersionPK BigInt?
  historyPK       BigInt?
  orderPos        BigInt
  autInformation  BigInt?
  specInformation BigInt?
  revision        BigInt? @default(0, map: "DF__TestCaseB__revis__7CE60A0F")

  @@index([parentPK], map: "idx_tcb_parentPK")
  @@index([parentPK, name], map: "idx_tcb_parentPK_name")
  @@index([parentPK, orderPos], map: "idx_tcb_parentPK_orderPos")
  @@index([PK, objectVersionPK, specInformation], map: "idx_tcb_PK_tovPK_specPK")
  @@index([PK, objectVersionPK, specInformation, autInformation], map: "idx_tcb_PK_tovPK_specPK_autPK")
  @@index([objectVersionPK], map: "idx_tcb_tovPK")
  @@index([objectVersionPK, uniqueID], map: "idx_tcb_tovPK_uid")
}

model TestCycleBean {
  PK                  BigInt    @id(map: "pk_TestCycleBean") @default(autoincrement())
  cycleName           String?   @db.NVarChar(256)
  projectPK           BigInt?
  testObjectVersionPK BigInt?
  visible             Boolean?
  includeTi           Boolean?
  description         BigInt?
  createdTime         DateTime? @db.DateTime
  creationType        String?   @db.NVarChar(256)
  creationSource      String?   @db.NVarChar(256)
  status              String?   @db.NVarChar(256)
  startDate           DateTime? @db.DateTime
  endDate             DateTime? @db.DateTime
  revision            BigInt?   @default(0, map: "DF__TestCycle__revis__7FC276BA")

  @@index([description], map: "idx_tcyb_description")
  @@index([projectPK], map: "idx_tcyb_projPK")
  @@index([projectPK, testObjectVersionPK], map: "idx_tcyb_projPK_tovPK")
}

model TestCycleCloneGroovyBean {
  PK          BigInt  @id(map: "pk_TestCycleCloneGroovyBean") @default(autoincrement())
  name        String? @db.NVarChar(50)
  description String? @db.NVarChar(256)
  script      String? @db.NText
  revision    BigInt? @default(0, map: "DF__TestCycle__revis__24BEF13F")
}

model TestFilterBean {
  PK           BigInt  @id(map: "pk_TestFilterBean") @default(autoincrement())
  name         String? @db.NVarChar(256)
  userPK       BigInt?
  content      String? @db.NText
  global       Boolean
  filterType   Int
  pluginFilter Boolean
  revision     BigInt? @default(0, map: "DF__TestFilte__revis__029EE365")

  @@index([global], map: "idx_tfb_global")
  @@index([global, userPK], map: "idx_tfb_global_userPK")
  @@index([name, userPK], map: "idx_tfb_name_userPK")
}

model TestingIntelligenceRoleBean {
  PK        BigInt  @id(map: "pk_TestingIntelligenceRoleBean") @default(autoincrement())
  projectPK BigInt?
  userPK    BigInt?
  revision  BigInt? @default(0, map: "DF__TestingIn__revis__279B5DEA")

  @@index([projectPK], map: "idx_tir_projPK")
  @@index([userPK], map: "idx_tir_userPK")
}

model TestLabelBean {
  PK        BigInt  @id(map: "pk_TestLabelBean") @default(autoincrement())
  name      String? @db.NVarChar(256)
  userPK    BigInt?
  global    Boolean
  projectPK BigInt?
  libraryPK BigInt?
  revision  BigInt? @default(0, map: "DF__TestLabel__revis__057B5010")

  @@index([global, userPK], map: "idx_tlb_global_userPK")
  @@index([projectPK], map: "idx_tlb_prjPK")
  @@index([projectPK, global], map: "idx_tlb_prjPK_global")
  @@index([projectPK, global, userPK], map: "idx_tlb_prjPK_global_userPK")
  @@index([projectPK, name, userPK], map: "idx_tlb_prjPK_name_userPK")
}

model TestObjectVersionBean {
  PK                   BigInt               @id(map: "pk_TestObjectVersionBean") @default(autoincrement())
  projectPK            BigInt?
  versionID            String?              @db.NVarChar(256)
  visible              Boolean?
  includeTi            Boolean?
  description          BigInt?
  createdTime          DateTime?            @db.DateTime
  lockerPK             BigInt?
  creationType         String?              @db.NVarChar(256)
  creationSource       String?              @db.NVarChar(256)
  status               String?              @db.NVarChar(256)
  startDate            DateTime?            @db.DateTime
  endDate              DateTime?            @db.DateTime
  cloningVisibility    Boolean?             @default(false, map: "DF__TestObjec__cloni__0857BCBB")
  baseTOV              Boolean?             @default(false, map: "DF__TestObjec__baseT__094BE0F4")
  sourceTOV            BigInt?
  variantsDefinitionPK BigInt?
  revision             BigInt?              @default(0, map: "DF__TestObjec__revis__0A40052D")
  KeywordBean          KeywordBean[]
  PlaceholderValue     PlaceholderValue[]
  VariantsDefinition   VariantsDefinition[]

  @@index([description], map: "idx_tovb_description")
  @@index([PK, projectPK], map: "idx_tovb_PK_projectPK")
  @@index([projectPK], map: "idx_tovb_projectPK")
}

model TestProjectBean {
  PK                          BigInt                  @id(map: "pk_TestProjectBean") @default(autoincrement())
  projName                    String?                 @db.NVarChar(256)
  testObjName                 String?                 @db.NVarChar(256)
  projID                      String?                 @db.NVarChar(256)
  projState                   String?                 @db.NVarChar(256)
  visible                     Boolean?
  description                 BigInt?
  lockerPK                    BigInt?
  customerName                String?                 @db.NVarChar(256)
  customerAdress              String?                 @db.NVarChar(256)
  contactPerson               String?                 @db.NVarChar(256)
  testLab                     String?                 @db.NVarChar(256)
  checkLocation               String?                 @db.NVarChar(256)
  ignoreNotPlanned            Boolean?
  ignoreNotEdited             Boolean?
  designersMayManageReqs      Boolean?
  designersMayImportReqs      Boolean?
  showRequirementMetrics      Boolean?                @default(false, map: "DF__TestProje__showR__0D1C71D8")
  defectSettings              BigInt?
  filterSyncInterval          BigInt?
  overwriteExecResp           Boolean?
  optionalCheckIn             Boolean?
  hideExecAutoCheckIn         Boolean?
  hideKeywords                Boolean?                @default(false, map: "DF__TestProje__hideK__0E109611")
  minimumRoleForDeletingTSE   Int?                    @default(0, map: "DF__TestProje__minim__0F04BA4A") @db.TinyInt
  extendedInteractionsContent Boolean?                @default(false, map: "DF__TestProje__exten__0FF8DE83")
  enableLibraries             Boolean?                @default(false, map: "DF__TestProje__enabl__10ED02BC")
  enableGlobalDatatypes       Boolean?                @default(false, map: "DF__TestProje__enabl__11E126F5")
  includeTi                   Boolean?
  createdTime                 DateTime?               @default(now(), map: "DF__TestProje__creat__12D54B2E") @db.DateTime
  creationType                String?                 @db.NVarChar(256)
  creationSource              String?                 @db.NVarChar(256)
  startDate                   DateTime?               @db.DateTime
  endDate                     DateTime?               @db.DateTime
  revision                    BigInt?                 @default(0, map: "DF__TestProje__revis__13C96F67")
  onlyAdminsMayManageUDFs     Boolean?                @default(false, map: "DF__TestProje__onlyA__14BD93A0")
  variantsManagementEnabled   Boolean?                @default(false, map: "DF__TestProje__varia__15B1B7D9")
  KeywordBean                 KeywordBean[]
  PluginQuickAccessBean       PluginQuickAccessBean[]

  @@index([projName], map: "idx_tpb_name")
}

model TestSequenceMarker {
  PK                  BigInt             @id(map: "pk_TestSeqMarker") @default(autoincrement())
  keywordAssignmentPK BigInt
  metawordCallPK      BigInt
  KeywordSpecRelBean  KeywordSpecRelBean @relation(fields: [keywordAssignmentPK], references: [PK], onDelete: Cascade, onUpdate: NoAction, map: "fk_TestSeqMarker_kwAssignment")
  MetawordCallBean    MetawordCallBean   @relation(fields: [metawordCallPK], references: [PK], onDelete: Cascade, onUpdate: NoAction, map: "fk_TestSeqMarker_mwcPK")

  @@unique([keywordAssignmentPK, metawordCallPK], map: "un_TestSeqMarker_kPK_mwPK")
  @@index([keywordAssignmentPK], map: "idx_TestSeqMarker_kwAssignment")
  @@index([metawordCallPK], map: "idx_TestSeqMarker_mwcPK")
}

model TestThemeBean {
  PK              BigInt  @id(map: "pk_TestThemeBean") @default(autoincrement())
  parentPK        BigInt?
  name            String? @db.NVarChar(256)
  uniqueID        String? @db.VarChar(32)
  objectVersionPK BigInt?
  historyPK       BigInt?
  orderPos        BigInt
  autInformation  BigInt?
  specInformation BigInt?
  revision        BigInt? @default(0, map: "DF__TestTheme__revis__188E2484")

  @@index([parentPK], map: "idx_ttb_parentPK")
  @@index([parentPK, name], map: "idx_ttb_parentPK_name")
  @@index([parentPK, orderPos], map: "idx_ttb_parentPK_orderPos")
  @@index([parentPK, objectVersionPK], map: "idx_ttb_parentPK_tovPK")
  @@index([PK, objectVersionPK, specInformation, autInformation], map: "idx_ttb_PK_tovPK_specPK_autPK")
  @@index([objectVersionPK], map: "idx_ttb_tovPK")
  @@index([objectVersionPK, uniqueID], map: "idx_ttb_tovPK_uid")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tmp_changedTestElements {
  elementPK BigInt

  @@index([elementPK], map: "idx_tcte_elementPK")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tmp_transactionExchange {
  pk      BigInt    @default(autoincrement())
  topic   Int
  created DateTime? @default(dbgenerated("sysdatetime()"), map: "DF__tmp_trans__creat__0B693390")

  @@ignore
}

model TovBaselineBean {
  PK          BigInt  @id(map: "pk_TovBaselineBean") @default(autoincrement())
  tovPK       BigInt?
  name        String? @db.NVarChar(256)
  project     String? @db.NVarChar(256)
  reProjectPK BigInt?
  revision    BigInt? @default(0, map: "DF__TovBaseli__revis__713F4D39")

  @@index([reProjectPK], map: "idx_TovBaseline_reProjectPK")
  @@index([tovPK], map: "idx_TovBaseline_tovPK")
}

model TS_EquivalenceClassBean {
  PK                      BigInt  @id(map: "pk_TS_EquivalenceClassBean") @default(autoincrement())
  objectVersionPK         BigInt?
  historyPK               BigInt?
  dataTypePK              BigInt?
  name                    String? @db.NVarChar(256)
  description             String? @db.NVarChar(256)
  defaultRepresentativePK BigInt?
  ordering                Int
  revision                BigInt? @default(0, map: "DF__TS_Equiva__revis__1B6A912F")

  @@index([dataTypePK], map: "idx_ecb_dtPK")
  @@index([dataTypePK, name], map: "idx_ecb_dtPK_name")
  @@index([dataTypePK, ordering], map: "idx_ecb_dtPK_ordering")
}

model UserDefinedFieldsBean {
  PK                  BigInt   @id(map: "pk_UserDefinedFieldsBean") @default(autoincrement())
  udfName             String?  @db.NVarChar(256)
  projectPK           BigInt?
  udfType             Int?
  mustField           Boolean?
  definedForTTInSpec  Boolean  @default(true, map: "DF__UserDefin__defin__577F7B36")
  definedForTCSInSpec Boolean  @default(true, map: "DF__UserDefin__defin__58739F6F")
  definedForTCInSpec  Boolean  @default(true, map: "DF__UserDefin__defin__5967C3A8")
  definedForTTInExec  Boolean  @default(true, map: "DF__UserDefin__defin__5A5BE7E1")
  definedForTCSInExec Boolean  @default(true, map: "DF__UserDefin__defin__5B500C1A")
  definedForTCInExec  Boolean  @default(true, map: "DF__UserDefin__defin__5C443053")
  ordering            Int
  revision            BigInt?  @default(0, map: "DF__UserDefin__revis__5D38548C")

  @@index([projectPK, mustField], map: "idx_udfb_projectPK_mustField")
  @@index([projectPK], map: "idx_udfb_projPK")
}

model UserDefinedFieldsLOVBean {
  PK       BigInt  @id(map: "pk_UserDefinedFieldsLOVBean") @default(autoincrement())
  udfValue String? @db.NVarChar(256)
  udfPK    BigInt?
  ordering Int
  revision BigInt? @default(0, map: "DF__UserDefin__revis__62F12DE2")

  @@index([udfPK], map: "idx_udflovb_udfPK")
}

model UserDefinedFieldsValueBean {
  PK         BigInt  @id(map: "pk_UserDefinedFieldsValueBean") @default(autoincrement())
  udfPK      BigInt?
  parentPK   BigInt?
  ordering   Int
  value      String? @db.NVarChar(256)
  parentType Int?
  udfName    String? @db.NVarChar(256)
  UDFType    Int?
  revision   BigInt? @default(0, map: "DF__UserDefin__revis__65CD9A8D")

  @@index([parentPK, udfPK], map: "idx_udfvb_parentPK")
  @@index([parentPK, parentType], map: "idx_udfvb_parentPK_parentType")
}

model UserInformationBean {
  PK              BigInt   @id(map: "pk_UserInformationBean") @default(autoincrement())
  name            String?  @unique(map: "uq_UserInformationBean_name") @db.NVarChar(256)
  fullName        String?  @db.NVarChar(256)
  EMail           String?  @db.NVarChar(256)
  passwordExpired Boolean?
  active          Boolean?
  revision        BigInt?  @default(0, map: "DF__UserInfor__revis__7B32CBC7")

  @@index([active], map: "idx_uib_active")
}

model UserProjectViewsMappingBean {
  PK        BigInt  @id(map: "pk_UserProjectViewsMappingBean") @default(autoincrement())
  userPK    BigInt?
  elementPK BigInt?
  type      Int?
  frequency Int?
  loggedIn  Boolean
  projPK    BigInt?
  revision  BigInt? @default(0, map: "DF__UserProje__revis__1E46FDDA")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model userroles {
  username  String? @db.NVarChar(64)
  userroles String? @db.NVarChar(64)

  @@ignore
}

model UserSessions {
  login      String   @id(map: "pk_UserSessions") @unique(map: "UQ__UserSess__7838F2724F9ECEDB") @db.NVarChar(64)
  expiration DateTime @db.DateTime

  @@index([expiration], map: "idx_us_expiration")
}

model VariantsDefinition {
  PK                    BigInt                @id(map: "pk_VarDef") @default(autoincrement())
  baseTOVPK             BigInt
  ordering              Int
  status                Int
  name                  String                @db.NVarChar(255)
  description           BigInt
  KeywordBean           KeywordBean[]
  PlaceholderValue      PlaceholderValue[]
  RichTextBean          RichTextBean          @relation(fields: [description], references: [PK], onUpdate: NoAction, map: "fk_VarDef_Descr")
  TestObjectVersionBean TestObjectVersionBean @relation(fields: [baseTOVPK], references: [PK], onDelete: Cascade, onUpdate: NoAction, map: "fk_VarDef_TOV")

  @@unique([baseTOVPK, name], map: "un_VarDef_baseTOVPK_name")
  @@unique([baseTOVPK, ordering], map: "un_VarDef_baseTOVPK_ordering")
}

model VersionBean {
  PK               BigInt    @id(map: "pk_VersionBean") @default(autoincrement())
  name             String?   @db.NVarChar(256)
  versionComment   String?   @db.NVarChar(256)
  objectPK         BigInt?
  objectStatus     Int
  objectVerdict    Int
  objectExecStatus Int
  date_            DateTime? @db.DateTime
  userName         String?   @db.NVarChar(256)
  type             Int
  revision         BigInt?   @default(0, map: "DF__VersionBe__revis__21236A85")

  @@index([objectPK], map: "idx_vb_objectPK")
  @@index([objectPK, type], map: "idx_vb_objectPK_type")
  @@index([PK, type], map: "idx_vb_PK_type")
}

model VersionLabelRelBean {
  PK        BigInt  @id(map: "pk_VersionLabelRelBean") @default(autoincrement())
  ordering  String? @db.NVarChar(256)
  testLabel BigInt?
  version   BigInt?
  revision  BigInt? @default(0, map: "DF__VersionLa__revis__23FFD730")

  @@index([testLabel, version], map: "idx_vlrb_tlPK_verPK")
  @@index([version], map: "idx_vlrb_verPK")
}

model XmlSubReportBean {
  PK            BigInt   @id(map: "pk_XmlSubReportBean") @default(autoincrement())
  projectPK     BigInt?
  tovPK         BigInt?
  objectPK      BigInt?
  type          Int?
  formattedText Boolean?
  content       Bytes?   @db.Image
  encoding      String?  @db.NVarChar(50)
  revision      BigInt?  @default(0, map: "DF__XmlSubRep__revis__1F0617E9")

  @@index([objectPK, type], map: "idx_xsr_objectPK_type")
  @@index([objectPK, type, formattedText], map: "idx_xsr_objectPK_type_richText")
  @@index([projectPK], map: "idx_xsr_projectPK")
  @@index([tovPK], map: "idx_xsrb_tovPK")
}
